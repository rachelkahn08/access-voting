import React, { Component } from 'react';
import QuickBuild from '../QuickBuild';

import Greeting from './Greeting';

import './_Navigation.css';

export default class Navigation extends Component {
	constructor(props) {
		super(props);

		this.state = {
			'hidden': true,
			'navClass': 'modal greeting',
			'maps': {
				'driver': [
					{
						'href': '/schedule/offers',
						'text': 'Update My Availability',
					},{
						'href': '/schedule',
						'text': 'See My Driving Schedule',
					},{
						'href': '/schedule/requests',
						'text': 'Schedule or Cancel Rides',
					},{
						'href': '/on-call',
						'text': 'Go On Call',
					},
				],
				'voter': [
					{
						'href': '/register',
						'text': 'Register To Vote',
					},{
						'href': '/polling-location',
						'text': 'Find My Polling Location',
					},{
						'href': '/schedule/edit',
						'text': 'Schedule or Cancel Rides',
					},{
						'href': '/on-call',
						'text': 'Go On Call',
					},
				],
			},
		}

		// this.toggle = this.toggle.bind(this);
		// this.setNavClass = this.setNavClass.bind(this);
		this.closeGreeting = this.closeGreeting.bind(this);
		this.toggleNav = this.toggleNav.bind(this);
	}

	closeGreeting() {
		return this.props.greeting ? this.props.update('homepage', 'greeting'): null;
	}

	toggleNav(e) {
		const parent = e.currentTarget.parentElement;
		let bubbles = document.getElementsByClassName('navlink');

		let animation = new window.TimelineMax;
		let TweenMax = window.TweenMax;

		const showMenu = () => {
			console.log('show');
			return new Promise((resolve) => {
				const tweet = console.log(bubbles);

				const tween = () => {
					animation.add( TweenMax.staggerFromTo(
						bubbles, 0, { 
							'display': 'none', 
							'opacity': 0,
						},{ 
							'display': 'flex',
							'opacity': 1 
						}, 0));

					animation.add( TweenMax.staggerFrom(bubbles, 0.5, {
							'opacity': 0,
							left: 0,
							bottom: 0,
							transform: 0,
						}, 0.5));

					animation.addCallback(tweet);
				}

				return resolve(tween);
			}).then(
				// console.log('tweeNED'),
				parent.classList.remove('hidden'),
				this.setState({hidden: false})
			)
			
		}

		const hideMenu = () => {
			console.log('hide');
			return new Promise(() => {

			}).then(
				parent.classList.add('hidden'),
				this.setState({hidden: true})
			)
		}

		return this.state.hidden ? showMenu() : hideMenu();
	}

	render() {

		const CheckGreeting = () => {
			return this.props.greeting ? 
				<Greeting 
					name={ this.props.user.name }
				/> : <div 
					onClick={ this.toggleNav } 
					id='hamburger' 
					className='hamburger'>
				</div>;
		}

		const NavList = (...att) => {
			const build = new QuickBuild;

			let propsObj = Object.assign({}, ...att);
			
			this.props.greeting ? (
				propsObj.onClick = this.closeGreeting,
				propsObj.showText = true
			) : null;

			return build.nav(propsObj);
		}

		const navClick = () => {
			return this.props.greeting ? null : this.toggleNav;
		}

		return (
				<CheckGreeting />
				<NavList 
					className = 'navlink' 
					sitemap = { this.state.maps[this.props.user.type] }
				/>
			</nav>
		);
	}
}