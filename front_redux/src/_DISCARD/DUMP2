import React, { Component } from 'react';
import { NavLink } from 'react-router-dom';

import './_Navigation.css';

export default class Navigation extends Component {
	constructor(props) {
		super(props);

		this.state = {
			'maps': {
				'driver': [
					{
						'href': '/schedule/offers',
						'text': 'Update My Availability',
					},{
						'href': '/schedule',
						'text': 'See My Driving Schedule',
					},{
						'href': '/schedule/requests',
						'text': 'Schedule or Cancel Rides',
					},{
						'href': '/on-call',
						'text': 'Go On Call',
					},
				],
				'voter': [
					{
						'href': '/register',
						'text': 'Register To Vote',
					},{
						'href': '/polling-location',
						'text': 'Find My Polling Location',
					},{
						'href': '/schedule/edit',
						'text': 'Schedule or Cancel Rides',
					},{
						'href': '/on-call',
						'text': 'Go On Call',
					},
				],
			},
			'navClass': this.setNavClass(),
			'hidden': true,
		}

		this.toggle = this.toggle.bind(this);
		this.setNavClass = this.setNavClass.bind(this);
	}

	

	showMenu() {
		const menu = document.getElementById('hamburger');

		function removeHidden(e) {
			console.log(e);
			menu.classList.remove('hidden');
		}

		const linkBubbles = document.querySelectorAll('.navlink');

		const animation = new window.TimelineMax;

		animation.addCallback(removeHidden, 0);

		animation.add( window.TweenMax.staggerTo(linkBubbles, 0, 
			{
				display: 'block',
				pointerEvents: 'inherit',
			}, 0), 0);
		
		animation.add( window.TweenMax.staggerFrom(linkBubbles, 0.2, { 
			left: '50px',
			bottom: '50px',
			opacity: 0,
			transform: 'none',
		}, 0.05), 0);
	}

	hideMenu() {
		const menu = document.getElementById('hamburger');

		function addHidden(e) {
			console.log(e);
			menu.classList.add('hidden');
		}

		const linkBubbles = document.querySelectorAll('.navlink');

		const animation = new window.TimelineMax;

		animation.add( window.TweenMax.staggerTo(linkBubbles, 0.2, { 
			left: '50px',
			bottom: '50px',
			opacity: 0,
			transform: 'none',
			display: 'none',
			pointerEvents: 'none',
		}, 0.05, addHidden), 0);
		
		animation.add( window.TweenMax.staggerFromTo(linkBubbles, 0,
		{
			display: 'block',
		},{
			display: 'none',
		}, 0), 0);

		animation.addCallback(addHidden);
	}

	toggle(e) {
		const menu = e.currentTarget;

		return this.props.greeting ? null : 
			menu.classList.contains('hidden') ? this.showMenu :
			this.hideMenu;
		
		// const navlinkToggle = e.currentTarget.classList.contains('hidden') ? 
		// 	this.showMenu(e.currentTarget) :
		// 	this.hideMenu(e.currentTarget);
		// return this.props.greeting ? this.props.update('homepage', 'greeting') : navlinkToggle;
	}

	closeGreeting() {
		return this.props.greeting ? this.props.update('homepage', 'greeting') : null;
	}

	render() {
		const NavList = () => {
			const blueprint = this.state.maps[this.props.user.type];

			const text = (text) => {
				return this.props.greeting ? text : null;
			}

			return blueprint.map((link) => {
				return <NavLink to={link.href} className='navlink'>{ text(link.text) }</NavLink>
			});
		}

		const Greeting = () => {
			return this.props.greeting ? (
				<div className='greeting headers'>
					<h2>Hi, {this.props.user.name}!</h2>
					<h3>What would you like to do?</h3>
				</div>
			) : null
		}

		const className = () => {
			return this.props.greeting ? 'modal' : '';
		}

		return (
			<div className={ className() }>
				<Greeting />
				<nav onClick={ this.toggle } className={ this.state.navClass }>
					<NavList />
				</nav>
			</div>
		);
	}
}